// Template5.jsx — Orange-accent CV (React-Bootstrap, moment only, no helpers)
// Auto-hides sections that aren't present in your API payload.

import React, { useEffect, useState } from "react";
import {
  Container,
  Row,
  Col,
  Card,
  Image,
  Badge,
  ListGroup,
  Spinner,
  Alert,
} from "react-bootstrap";
import "bootstrap/dist/css/bootstrap.min.css";
import {
  FiMail,
  FiPhone,
  FiMapPin,
  FiGlobe,
  FiLinkedin,
  FiAward,
} from "react-icons/fi";
import moment from "moment";

const API = "https://ekazi.co.tz/api/cv/cv_builder/30750";
const CV_BASE = "https://ekazi.co.tz";

// Palette
const ORANGE = "#f59e0b";
const ORANGE_DARK = "#b45309";
const INK = "#1f2937";
const PAPER = "#ffffff";
const PANEL = "#f8fafc";
const DIVIDER = "rgba(0,0,0,.08)";

export default function Template5() {
  const [payload, setPayload] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");

  useEffect(() => {
    fetch(API)
      .then((r) => {
        if (!r.ok) throw new Error(`HTTP ${r.status}`);
        return r.json();
      })
      .then((j) => {
        setPayload(j?.data || {});
        setLoading(false);
      })
      .catch((e) => {
        setError(e.message || "Failed to load profile");
        setLoading(false);
      });
  }, []);

  if (loading) {
    return (
      <div
        className="d-flex justify-content-center align-items-center"
        style={{ height: "60vh" }}
      >
        <Spinner animation="border" role="status" />
        <span className="ms-3">Loading CV…</span>
      </div>
    );
  }
  if (error) {
    return (
      <div className="container py-4">
        <Alert variant="danger" className="mb-0">
          {error}
        </Alert>
      </div>
    );
  }

  // ----- Extract data safely -----
  const profiles = Array.isArray(payload?.applicant_profile)
    ? payload.applicant_profile
    : [];
  const profile = profiles[0] || {};
  const users = Array.isArray(payload?.user) ? payload.user : [];
  const experiences = Array.isArray(payload?.experience)
    ? payload.experience
    : [];
  const referees = Array.isArray(payload?.referees) ? payload.referees : [];
  const languages = Array.isArray(payload?.language) ? payload.language : [];
  const addresses = Array.isArray(payload?.address) ? payload.address : [];
  const education = Array.isArray(payload?.education) ? payload.education : [];
  const knowledge = Array.isArray(payload?.knowledge) ? payload.knowledge : [];
  const software = Array.isArray(payload?.software) ? payload.software : [];
  const tools = Array.isArray(payload?.tools) ? payload.tools : [];
  const personalities = Array.isArray(payload?.applicant_personality)
    ? payload.applicant_personality
    : [];
  const training = Array.isArray(payload?.training) ? payload.training : [];
  const proficiency = Array.isArray(payload?.proficiency)
    ? payload.proficiency
    : [];
  const memberships = Array.isArray(payload?.membership)
    ? payload.membership
    : [];

  const fullName =
    `${profile?.first_name || ""} ${profile?.middle_name || ""} ${
      profile?.last_name || ""
    }`
      .replace(/\s+/g, " ")
      .trim() || "—";

  const currentTitle =
    payload?.current_position ||
    payload?.experience?.[0]?.position?.position_name ||
    "";

  const summary =
    payload?.careers?.[0]?.career || payload?.objective?.objective || "";

  const primaryEmail = users?.[0]?.email || payload?.email?.email || "";
  const primaryPhone =
    payload?.phone?.phone_number ||
    payload?.phone?.number ||
    users?.[0]?.phone ||
    "";
  const primaryAddress = addresses?.[0]
    ? `${addresses[0]?.region_name || ""}${
        addresses[0]?.name ? ", " + addresses[0]?.name : ""
      }`.replace(/^,\s*/, "")
    : "";

  const website = payload?.socials?.website || "";
  const linkedin = payload?.socials?.linkedin || "";
  const safeWebsite =
    website && !/^https?:\/\//i.test(website) ? `https://${website}` : website;
  const safeLinkedin =
    linkedin && !/^https?:\/\//i.test(linkedin)
      ? `https://${linkedin}`
      : linkedin;

  // ----- Transformations (moment only) -----
  const splitLines = (text = "") =>
    text
      .split("\n")
      .map((t) => t.replace(/^•\s*/, "").trim())
      .filter(Boolean);

  const work = experiences
    .slice()
    .sort((a, b) => {
      const bEnd = moment(b?.end_date);
      const bStart = moment(b?.start_date);
      const aEnd = moment(a?.end_date);
      const aStart = moment(a?.start_date);
      const bKey = (bEnd.isValid() ? bEnd : bStart).valueOf() || 0;
      const aKey = (aEnd.isValid() ? aEnd : aStart).valueOf() || 0;
      return bKey - aKey;
    })
    .map((e) => {
      const start = moment(e?.start_date);
      const end = moment(e?.end_date);
      const period =
        (start.isValid() ? start.format("MMM YYYY") : "") +
        (start.isValid() || end.isValid() ? " – " : "") +
        (end.isValid()
          ? end.format("MMM YYYY")
          : start.isValid()
          ? "Present"
          : "");
      return {
        title: e?.position?.position_name || e?.title || "—",
        company:
          e?.employer?.employer_name || e?.company || e?.organization || "—",
        location: `${e?.employer?.region?.region_name || ""}${
          e?.employer?.sub_location ? ", " + e?.employer?.sub_location : ""
        }`.replace(/^,\s*/, ""),
        period,
        bullets: splitLines(e?.responsibility || ""),
      };
    });

  const eduRows = education
    .slice()
    .sort((a, b) => {
      const bEnd = moment(b?.ended || b?.end_date);
      const bStart = moment(b?.started || b?.start_date);
      const aEnd = moment(a?.ended || a?.end_date);
      const aStart = moment(a?.started || a?.start_date);
      const bKey = (bEnd.isValid() ? bEnd : bStart).valueOf() || 0;
      const aKey = (aEnd.isValid() ? aEnd : aStart).valueOf() || 0;
      return bKey - aKey;
    })
    .map((ed) => {
      const start = moment(ed?.started || ed?.start_date);
      const end = moment(ed?.ended || ed?.end_date);
      return {
        school:
          ed?.college?.college_name || ed?.institution || ed?.school || "—",
        course:
          ed?.course?.course_name ||
          ed?.qualification?.qualification ||
          ed?.degree ||
          "—",
        yearRange:
          (start.isValid() ? start.format("YYYY") : "") +
          (start.isValid() || end.isValid() ? " - " : "") +
          (end.isValid()
            ? end.format("YYYY")
            : start.isValid()
            ? "Present"
            : ""),
      };
    });

  const certs = [
    ...training.map((t) => ({
      name: t?.name || t?.qualification || "Certificate",
      year: moment(t?.ended).isValid()
        ? moment(t.ended).format("YYYY")
        : moment(t?.started).isValid()
        ? moment(t.started).format("YYYY")
        : "",
      org: t?.institution || t?.organization || "",
    })),
    ...proficiency.map((p) => ({
      name:
        p?.award ||
        p?.certificate ||
        p?.proficiency?.proficiency_name ||
        "Certificate",
      year: moment(p?.ended).isValid()
        ? moment(p.ended).format("YYYY")
        : moment(p?.started).isValid()
        ? moment(p.started).format("YYYY")
        : "",
      org: p?.organization?.organization_name || "",
    })),
  ];

  // Booleans to control rendering (hide if absent)
  const hasObjective = Boolean(payload?.objective?.objective);
  const hasWork = work.length > 0;
  const hasSkills =
    (knowledge && knowledge.length) ||
    (software && software.length) ||
    (tools && tools.length) ||
    (personalities && personalities.length);
  const hasLanguages = languages.length > 0;
  const hasEducation = eduRows.length > 0;
  const hasReferees = referees.length > 0;
  const hasMemberships = memberships.length > 0;
  const hasCerts = certs.length > 0;

  const hasAddress = Boolean(primaryAddress);
  const hasPhone = Boolean(primaryPhone);
  const hasEmail = Boolean(primaryEmail);
  const hasWebsite = Boolean(safeWebsite);
  const hasLinkedin = Boolean(safeLinkedin);

  return (
    <Container
      fluid
      style={{
        width: "210mm",
        minHeight: "297mm",
        margin: "auto",
        backgroundColor: PAPER,
        padding: "5mm",
        color: INK,
        boxShadow: "0 0 5px rgba(0,0,0,0.2)",
      }}
      className="p-0"
    >
      <link
        href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700;800&display=swap"
        rel="stylesheet"
      />

      {/* Header */}
      <Row className="g-0">
        <Col xs={12}>
          <div className="headerWrap">
            <div className="bar left" />
            <h1 className="name">{fullName}</h1>
            <div className="bar right" />
          </div>
        </Col>
      </Row>

      <Row className="g-0">
        {/* Main column */}
        <Col md={8} className="p-4 pe-md-5">
          {/* Profile / Summary */}
          {summary ? (
            <Card className="border-0 mb-3">
              <Card.Body className="p-0">
                <SectionTitle title="Profile" />
                <Card.Text className="text-muted lh-base mb-0">
                  {summary}
                </Card.Text>
              </Card.Body>
            </Card>
          ) : null}

          {/* Career Objective */}
          {hasObjective ? (
            <Card className="border-0 mb-3">
              <Card.Body className="p-0">
                <SectionTitle title="Career Objective" />
                <Card.Text className="text-muted lh-base mb-0">
                  {payload.objective.objective}
                </Card.Text>
              </Card.Body>
            </Card>
          ) : null}

          {/* Job Experience */}
          {hasWork ? (
            <>
              <SectionTitle title="Job Experience" />
              {work.map((exp, i) => (
                <Card key={i} className="mb-3 border-0">
                  <Card.Body className="p-0">
                    <div className="d-flex justify-content-between gap-3">
                      <div>
                        <div className="fw-bold" style={{ color: ORANGE_DARK }}>
                          {exp.title}
                        </div>
                        <div className="text-muted">{exp.company}</div>
                        {exp.location ? (
                          <div className="text-muted small">{exp.location}</div>
                        ) : null}
                      </div>
                      <Badge bg="light" className="text-dark border">
                        {exp.period}
                      </Badge>
                    </div>
                    {exp.bullets.length > 0 ? (
                      <ListGroup variant="flush" className="mt-2">
                        {exp.bullets.map((b, k) => (
                          <ListGroup.Item
                            key={k}
                            className="px-0 py-1 text-muted small bg-white border-0"
                          >
                            • {b}
                          </ListGroup.Item>
                        ))}
                      </ListGroup>
                    ) : null}
                  </Card.Body>
                </Card>
              ))}
            </>
          ) : null}

          {/* Skills & Endorsements */}
          {hasSkills ? (
            <>
              <SectionTitle title="Skills & Endorsements" />
              <Row className="mb-3">
                {knowledge.length ? (
                  <Col sm={6} className="mb-2">
                    <div className="fw-semibold">Skills & Knowledge</div>
                    <div className="small text-muted">
                      {knowledge
                        .map(
                          (k) =>
                            k?.knowledge?.knowledge_name || k?.knowledge_name
                        )
                        .filter(Boolean)
                        .join(", ")}
                    </div>
                  </Col>
                ) : null}
                {software.length ? (
                  <Col sm={6} className="mb-2">
                    <div className="fw-semibold">Software</div>
                    <div className="small text-muted">
                      {software
                        .map(
                          (s) => s?.software?.software_name || s?.software_name
                        )
                        .filter(Boolean)
                        .join(", ")}
                    </div>
                  </Col>
                ) : null}
                {tools.length ? (
                  <Col sm={6} className="mb-2">
                    <div className="fw-semibold">Tools</div>
                    <div className="small text-muted">
                      {tools
                        .map((t) => t?.tool?.tool_name || t?.tool_name)
                        .filter(Boolean)
                        .join(", ")}
                    </div>
                  </Col>
                ) : null}
                {personalities.length ? (
                  <Col sm={6} className="mb-2">
                    <div className="fw-semibold">Personality</div>
                    <div className="small text-muted">
                      {personalities
                        .map((p) => p?.personality?.personality_name)
                        .filter(Boolean)
                        .join(", ")}
                    </div>
                  </Col>
                ) : null}
              </Row>
            </>
          ) : null}

          {/* Career Summary */}
          {hasWork ? (
            <>
              <SectionTitle title="Career Summary" />
              <ListGroup className="mb-3">
                {work.map((w, i) => (
                  <ListGroup.Item
                    key={`sum-${i}`}
                    className="bg-white border-0 px-0 py-2"
                  >
                    <Row className="align-items-start">
                      <Col xs={5} md={4} className="text-muted small">
                        {w.period}
                      </Col>
                      <Col xs={7} md={8}>
                        <div className="fw-semibold">{w.title}</div>
                        <div className="text-muted small">{w.company}</div>
                      </Col>
                    </Row>
                  </ListGroup.Item>
                ))}
              </ListGroup>
            </>
          ) : null}

          {/* Professional Memberships */}
          {memberships.length ? (
            <>
              <SectionTitle title="Professional Memberships" />
              <ListGroup className="mb-3">
                {memberships.map((m, i) => (
                  <ListGroup.Item
                    key={`mem-${i}`}
                    className="bg-white border-0 px-0 py-1"
                  >
                    {m?.name || m?.organization || "Membership"}
                  </ListGroup.Item>
                ))}
              </ListGroup>
            </>
          ) : null}

          {/* Referees */}
          {referees.length ? (
            <Card className="refPanel mt-2 border-0">
              <Card.Body className="p-3">
                <div className="d-flex align-items-center gap-2 mb-2">
                  <span className="refDot" />
                  <h6 className="m-0" style={{ color: ORANGE_DARK }}>
                    Referees
                  </h6>
                </div>
                <Row className="g-4">
                  {referees.map((r, i) => {
                    const nm = [r.first_name, r.middle_name, r.last_name]
                      .filter(Boolean)
                      .join(" ");
                    return (
                      <Col md={6} key={r.id ?? i}>
                        <div className="fw-semibold">{nm || "—"}</div>
                        <div className="text-muted small">
                          {r?.referee_position || "—"}
                        </div>
                        <div className="small">{r?.employer || "—"}</div>
                        <div className="small">{r?.phone || "—"}</div>
                        <div className="small">{r?.email || "—"}</div>
                      </Col>
                    );
                  })}
                </Row>
              </Card.Body>
            </Card>
          ) : null}

          {/* Footer pill (website) */}
          {safeWebsite ? (
            <div className="d-flex justify-content-center my-4">
              <span className="footerPill">{website}</span>
            </div>
          ) : null}
        </Col>

        {/* Sidebar */}
        <Col md={4} className="p-4 ps-md-3">
          {/* Photo + current title */}
          {profiles.length ? (
            <Card className="border-0 mb-3">
              <Card.Body className="p-3 d-flex align-items-center gap-3">
                <Image
                  src={
                    profile?.picture
                      ? `${CV_BASE}/${profile.picture}`
                      : "https://placehold.co/88x88?text=Photo"
                  }
                  onError={(e) =>
                    (e.currentTarget.src =
                      "https://placehold.co/88x88?text=Photo")
                  }
                  width={72}
                  height={72}
                  style={{ objectFit: "cover", borderRadius: 8 }}
                  className="border"
                  alt="profile"
                />
                <div>
                  {currentTitle ? (
                    <div className="fw-semibold">{currentTitle}</div>
                  ) : null}
                </div>
              </Card.Body>
            </Card>
          ) : null}

          {/* Contact Details */}
          {primaryAddress ||
          primaryPhone ||
          primaryEmail ||
          safeWebsite ||
          safeLinkedin ? (
            <SideSection title="Contact Details">
              <ListGroup variant="flush" className="small">
                {primaryAddress ? (
                  <ListGroup.Item className="px-0 bg-transparent d-flex gap-2 align-items-start">
                    <FiMapPin className="mt-1" />
                    <span className="text-wrap">{primaryAddress}</span>
                  </ListGroup.Item>
                ) : null}
                {primaryPhone ? (
                  <ListGroup.Item className="px-0 bg-transparent d-flex gap-2 align-items-start">
                    <FiPhone className="mt-1" />
                    <span>{primaryPhone}</span>
                  </ListGroup.Item>
                ) : null}
                {primaryEmail ? (
                  <ListGroup.Item className="px-0 bg-transparent d-flex gap-2 align-items-start">
                    <FiMail className="mt-1" />
                    <span className="text-wrap">{primaryEmail}</span>
                  </ListGroup.Item>
                ) : null}
                {safeWebsite ? (
                  <ListGroup.Item className="px-0 bg-transparent d-flex gap-2 align-items-start">
                    <FiGlobe className="mt-1" />
                    <a
                      href={safeWebsite}
                      target="_blank"
                      rel="noreferrer noopener"
                      className="link-underline link-underline-opacity-0"
                    >
                      {website}
                    </a>
                  </ListGroup.Item>
                ) : null}
                {safeLinkedin ? (
                  <ListGroup.Item className="px-0 bg-transparent d-flex gap-2 align-items-start">
                    <FiLinkedin className="mt-1" />
                    <a
                      href={safeLinkedin}
                      target="_blank"
                      rel="noreferrer noopener"
                      className="link-underline link-underline-opacity-0"
                    >
                      {linkedin}
                    </a>
                  </ListGroup.Item>
                ) : null}
              </ListGroup>
            </SideSection>
          ) : null}

          {/* Languages */}
          {languages.length ? (
            <SideSection title="Languages">
              <ListGroup variant="flush" className="small">
                {languages.map((l, i) => (
                  <ListGroup.Item
                    key={`lang-${i}`}
                    className="px-0 bg-transparent border-0"
                  >
                    {l?.language?.language_name || "—"}
                  </ListGroup.Item>
                ))}
              </ListGroup>
            </SideSection>
          ) : null}

          {/* Education */}
          {eduRows.length ? (
            <SideSection title="Education">
              <ListGroup variant="flush" className="small">
                {eduRows.map((e, i) => (
                  <ListGroup.Item
                    key={`edu-${i}`}
                    className="px-0 bg-transparent border-0"
                  >
                    <div className="fw-semibold">{e.course}</div>
                    <div className="text-muted">{e.school}</div>
                    <div className="text-muted">({e.yearRange})</div>
                  </ListGroup.Item>
                ))}
              </ListGroup>
            </SideSection>
          ) : null}

          {/* Certifications */}
          {certs.length ? (
            <SideSection title="Certifications">
              <ListGroup variant="flush" className="small">
                {certs.map((c, i) => (
                  <ListGroup.Item
                    key={`cert-${i}`}
                    className="px-0 bg-transparent border-0 d-flex gap-2"
                  >
                    <FiAward className="mt-1" />
                    <div>
                      <div className="fw-semibold">{c.name}</div>
                      <div className="text-muted">
                        {[c.org, c.year].filter(Boolean).join(", ")}
                      </div>
                    </div>
                  </ListGroup.Item>
                ))}
              </ListGroup>
            </SideSection>
          ) : null}
        </Col>
      </Row>

      <style>{`
        body { font-family: "Inter", system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol","Noto Color Emoji", sans-serif; }

        .headerWrap {
          position: relative;
          display: grid;
          grid-template-columns: 1fr auto 1fr;
          align-items: center;
          column-gap: 12px;
          padding: 18px 18px 8px;
          border-bottom: 1px solid ${DIVIDER};
        }
        .headerWrap .name {
          margin: 0;
          font-weight: 800;
          letter-spacing: .2px;
          color: ${INK};
        }
        .headerWrap .bar {
          height: 20px;
          background: ${ORANGE};
          border-radius: 2px;
        }
        .headerWrap .bar.left { justify-self: end; width: 140px; }
        .headerWrap .bar.right { justify-self: start; width: 160px; }

        .sectionTitle {
          color: ${ORANGE};
          font-weight: 700;
          display: inline-flex;
          align-items: center;
          gap: .5rem;
          margin: 18px 0 .35rem 0;
        }
        .sectionTitle:after {
          content: "";
          display: inline-block;
          height: 2px;
          background: ${DIVIDER};
          width: 100%;
          margin-left: .75rem;
        }

        .refPanel {
          background: ${PANEL};
          border: 1px solid ${DIVIDER};
          border-radius: 10px;
        }
        .refDot {
          width: 10px;
          height: 10px;
          border-radius: 50%;
          background: ${ORANGE};
          display: inline-block;
        }

        .footerPill {
          background: ${ORANGE};
          color: #fff;
          padding: 8px 22px;
          border-radius: 999px;
          font-weight: 600;
          box-shadow: 0 6px 14px rgba(245, 158, 11, .25);
        }

        .sideTitle {
          color: ${ORANGE};
          font-weight: 700;
          margin-bottom: .35rem;
        }
        .sideDivider {
          height: 2px;
          background: ${DIVIDER};
          margin-bottom: .75rem;
        }
      `}</style>
    </Container>
  );
}

function SectionTitle({ title }) {
  return <div className="sectionTitle">{title}</div>;
}

function SideSection({ title, children }) {
  return (
    <Card className="border-0 mb-4">
      <Card.Body className="p-0">
        <div className="sideTitle">{title}</div>
        <div className="sideDivider" />
        {children}
      </Card.Body>
    </Card>
  );
}
